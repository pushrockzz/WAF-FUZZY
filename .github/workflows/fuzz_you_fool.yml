name: Fuzz Again and Again

on:
  workflow_dispatch:

permissions:
  contents: read # Only needs to read the repo contents
  actions: write # Required for uploading artifacts

jobs:
  # Job 1: Split the wordlist into manageable chunks
  prepare-wordlist-chunks:
    name: Prepare Wordlist Chunks
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build_matrix.outputs.matrix }}
      chunk_count: ${{ steps.build_matrix.outputs.chunk_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create Wordlist Chunks and Build Matrix
        id: build_matrix
        shell: bash
        run: |

          wget -qO wordlist.txt https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/Web-Content/raft-small-words-lowercase.txt
          WORDLIST_FILE="wordlist.txt"
          CHUNK_SIZE=5000 # Adjust this number based on your wordlist size and desired parallelism
          CHUNK_DIR="wordlist-chunks"

          # --- Validation ---
          if [ ! -f "$WORDLIST_FILE" ]; then
            echo "::error::Wordlist file '$WORDLIST_FILE' not found in the repository root."
            exit 0
          fi

          # --- Splitting Logic ---
          mkdir -p "$CHUNK_DIR"
          echo "-> Splitting '$WORDLIST_FILE' into chunks of $CHUNK_SIZE lines each..."
          split -l "$CHUNK_SIZE" -a 3 --numeric-suffixes=1 "$WORDLIST_FILE" "$CHUNK_DIR/chunk_"
          
          echo "-> Chunk files created in '$CHUNK_DIR' directory:"
          ls -lh "$CHUNK_DIR"
          
          # --- Count Chunks ---
          CHUNK_COUNT=$(find "$CHUNK_DIR" -type f -name 'chunk_*' | wc -l)
          if [ "$CHUNK_COUNT" -eq 0 ]; then
            echo "::warning::Splitting produced 0 chunk files. No work to do."
            # Set empty outputs to prevent the next job from running
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            echo "chunk_count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "-> Found $CHUNK_COUNT chunk files to process."
          
          # --- Build JSON Matrix ---
          # This creates a JSON array of the chunk file paths for the strategy matrix
          JSON_MATRIX=$(find "$CHUNK_DIR" -type f -name 'chunk_*' | jq --raw-input --slurp --compact-output 'split("\n") | map(select(length > 0))')
          
          echo "-> Generated Matrix: $JSON_MATRIX"
          
          # --- Set Job Outputs ---
          echo "matrix=$JSON_MATRIX" >> "$GITHUB_OUTPUT"
          echo "chunk_count=$CHUNK_COUNT" >> "$GITHUB_OUTPUT"
          
      - name: Upload Wordlist Chunks as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wordlist-chunks-artifact
          path: wordlist-chunks/
          retention-days: 1

  # Job 2: Run feroxbuster in parallel using the chunks
  run-feroxbuster-in-parallel:
    needs: prepare-wordlist-chunks
    if: ${{ needs.prepare-wordlist-chunks.outputs.chunk_count > 0 }} # Only run if chunks exist
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allows other scans to continue even if one fails
      matrix:
        # Dynamically create a job for each chunk file from the previous job's output
        wordlist_chunk: ${{ fromJson(needs.prepare-wordlist-chunks.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Feroxbuster
        run: |
          curl -sL https://raw.githubusercontent.com/epi052/feroxbuster/main/install-nix.sh | bash
          sudo mv /home/runner/work/WAF-FUZZY/WAF-FUZZY/feroxbuster /usr/local/bin/
          echo "Feroxbuster installed at $(which feroxbuster)"
          
      - name: Download Wordlist Chunks Artifact
        uses: actions/download-artifact@v4
        with:
          name: wordlist-chunks-artifact
          path: wordlist-chunks/
          
      - name: Debug Information
        run: |
          echo "This runner is responsible for wordlist chunk: ${{ matrix.wordlist_chunk }}"
          echo "Targets to be scanned:"
          cat target.txt
          
      - name: Run Feroxbuster on All Targets with Assigned Wordlist Chunk
        id: run_feroxbuster
        run: |
          # Define a unique output file for this runner's results
          CHUNK_BASENAME=$(basename "${{ matrix.wordlist_chunk }}")
          OUTPUT_FILE="results_${CHUNK_BASENAME}.txt"
          
          echo "-> Running feroxbuster against targets in 'target.txt'..."
          echo "-> Using wordlist: ${{ matrix.wordlist_chunk }}"
          echo "-> Saving output to: $OUTPUT_FILE"

          # Loop through each target and run feroxbuster

          while IFS= read -r target_url; do
            # Skip empty lines in the target file
            if [ -n "$target_url" ]; then
              echo "Scanning $target_url..."
              feroxbuster -u "$target_url" --wordlist "${{ matrix.wordlist_chunk }}" --random-agent --filter-status 404 307 500 403 --output "$OUTPUT_FILE" --quiet
            fi
          done < target.txt

          echo "output_path=$OUTPUT_FILE" >> "$GITHUB_OUTPUT"

      - name: Create Safe Artifact Name
        id: safe_name
        run: |
          # Sanitize the chunk name to be a valid artifact name (replace slashes)
          SAFE_NAME=$(echo "${{ matrix.wordlist_chunk }}" | tr '/' '_')
          echo "safe_name=$SAFE_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload Individual Result Artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ steps.safe_name.outputs.safe_name }}
          path: ${{ steps.run_feroxbuster.outputs.output_path }}
          retention-days: 1

  # Job 3: Combine all individual results into a final report
  aggregate-results:
    needs: run-feroxbuster-in-parallel
    if: always() # This ensures the report is generated even if some scans fail
    runs-on: ubuntu-latest
    steps:
      - name: Create Directory for Results
        run: mkdir -p all-results

      - name: Download All Result Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results/
          pattern: result-*
          merge-multiple: true

      - name: Aggregate and Sort Results
        run: |
          echo "Aggregating all results..."
          
          # Check if any result files were downloaded
          if [ -z "$(ls -A all-results/)" ]; then
            echo "No result files found to aggregate. Exiting."
            exit 0
          fi
          
          # Combine all downloaded result files into one, then sort and remove duplicates
          cat all-results/results_*.txt | sort -u > feroxbuster-final-report.txt
          
          echo "âœ… Final aggregated report created at feroxbuster-final-report.txt"
          echo "Total unique findings: $(wc -l < feroxbuster-final-report.txt)"
          
      - name: Upload Final Aggregated Report
        uses: actions/upload-artifact@v4
        with:
          name: final-feroxbuster-report
          path: feroxbuster-final-report.txt
